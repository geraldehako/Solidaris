# Generated by Django 4.1.7 on 2024-12-20 22:27

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        ("centres", "0002_initial"),
        ("mutualistes", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Utilisateur",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "photo",
                    models.ImageField(
                        blank=True,
                        help_text="Photo de profil de l'utilisateur",
                        null=True,
                        upload_to="utilisateurs/photos/",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("superadmin", "Super Administrateur"),
                            ("gestionnaire", "Gestionnaire"),
                            ("point_focal", "Point Focal"),
                            ("mutualiste", "Mutualiste"),
                            ("centre_sante", "Centre de Santé"),
                            ("medecin_conseil", "Médecin Conseil"),
                        ],
                        default="gestionnaire",
                        help_text="Rôle principal de l'utilisateur dans le système",
                        max_length=20,
                    ),
                ),
                (
                    "telephone",
                    models.CharField(
                        blank=True,
                        help_text="Numéro de téléphone de l'utilisateur",
                        max_length=15,
                        null=True,
                    ),
                ),
                (
                    "centre_sante",
                    models.OneToOneField(
                        blank=True,
                        help_text="Lien avec le centre de santé si l'utilisateur représente un centre",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="utilisateur",
                        to="centres.centresante",
                    ),
                ),
                (
                    "groupe",
                    models.ForeignKey(
                        blank=True,
                        help_text="Groupe associé (pour les points focaux uniquement)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="utilisateurs",
                        to="centres.groupe",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "mutualiste",
                    models.OneToOneField(
                        blank=True,
                        help_text="Lien avec le mutualiste si l'utilisateur est un mutualiste",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="utilisateur",
                        to="mutualistes.mutualiste",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "Utilisateur",
                "verbose_name_plural": "Utilisateurs",
                "ordering": ["username"],
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="HistoriqueUtilisateur",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "action",
                    models.CharField(
                        help_text="Description de l'action effectuée", max_length=255
                    ),
                ),
                (
                    "date_action",
                    models.DateTimeField(
                        auto_now_add=True, help_text="Date et heure de l'action"
                    ),
                ),
                (
                    "details",
                    models.JSONField(
                        blank=True,
                        help_text="Détails supplémentaires de l'action (format JSON)",
                        null=True,
                    ),
                ),
                (
                    "utilisateur",
                    models.ForeignKey(
                        help_text="Utilisateur ayant effectué l'action",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="historiques",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Historique utilisateur",
                "verbose_name_plural": "Historiques des utilisateurs",
                "ordering": ["-date_action"],
            },
        ),
        migrations.CreateModel(
            name="ConnexionUtilisateur",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "adresse_ip",
                    models.GenericIPAddressField(
                        help_text="Adresse IP de l'utilisateur lors de la connexion"
                    ),
                ),
                (
                    "date_connexion",
                    models.DateTimeField(
                        auto_now_add=True, help_text="Date et heure de la connexion"
                    ),
                ),
                (
                    "utilisateur",
                    models.ForeignKey(
                        help_text="Utilisateur connecté",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="connexions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Connexion utilisateur",
                "verbose_name_plural": "Connexions des utilisateurs",
                "ordering": ["-date_connexion"],
            },
        ),
    ]
